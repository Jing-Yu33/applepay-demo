/**
 * This is a UI controller meant to handle any UI interaction
 *
 * @return {object} UI selectors and UI utility functions
 *
 */
var applePayUiController = (function () {
  var DOMStrings = {
    appleButton: 'ckoApplePay',
    errorMessage: 'ckoApplePayError'
  }
  return {
    DOMStrings,
    displayApplePayButton: function () {
      document.getElementById(DOMStrings.appleButton).style.display = 'block'
    },
    displayErrorMessage: function () {
      document.getElementById(DOMStrings.errorMessage).style.display = 'block'
    }
  }
})()

/**
 * This the controller for Apple Pay where all the business logic can be handled.
 *
 * @param {uiController} applePayUiController The UI controller
 *
 * @return {object} Contains a simple init function
 *
 */
var applePayController = (function (uiController) {
  
  var BACKEND_URL_VALIDATE_SESSION = 'https://enigmatic-retreat-54006.herokuapp.com/validateSession'
  // var BACKEND_URL_PAY = 'https://enigmatic-retreat-54006.herokuapp.com/pay'
  
  var applePayWebVersion = 3;
  
  var paymentRequest = {
    currencyCode: 'USD',
    countryCode: 'US',
    merchantCapabilities: [
      'supports3DS',
      'supportsEMV',
      'supportsCredit',
      'supportsDebit'
    ],
    supportedNetworks: ["visa", "mastercard", "amex", "discover"],
    shippingMethods: [
      {
        label: 'Free Shipping',
        amount: '0.00',
        identifier: 'free',
        detail: 'Delivers in five business days',
      },
      {
        label: 'Express Shipping',
        amount: '5.00',
        identifier: 'express',
        detail: 'Delivers in two business days',
      },
    ],
    total: {
      label: "Demo (Card is not charged",
      amount: "1.99",
      type: 'final'
    }
  }

  /**
   * Checks if Apple Pay is possible in the current environment.
   *
   * @return {boolean} Boolean to check if Apple Pay is possible
   */
  var _applePayAvailable = function () {
    return window.ApplePaySession && ApplePaySession.canMakePayments()
  }

  /**
   * Starts the Apple Pay session using a configuration
   */
  var _startApplePaySession = function (paymentRequest) {
    var applePaySession = new ApplePaySession(applePayWebVersion, paymentRequest)
    _handleApplePayEvents(applePaySession)
    applePaySession.begin()
  }

  /**
   * Sets a onClick listen on the Apple Pay button. When clicked it will
   * begin the Apple Pay session with your configuration
   */
  var _setButtonClickListener = function () {
    document
      .getElementById(uiController.DOMStrings.appleButton)
      .addEventListener('click', function () {
        _startApplePaySession(paymentRequest)
  })
}

  /**
   * This method call your backend server with the Apple Pay validation URL.
   * On the backend, an POST request will be done this URL with the Apple Pay certificates
   * and the outcome will be returned
   *
   * @param {string} appleUrl The Apple Pay validation URL generated by Apple
   * @param {function} callback Callback function used to return the server call outcome
   *
   * @return {object} The payment request configuration
   *
   */
  var _validateApplePaySession = function (appleUrl, callback) {
    // I'm using AXIOS to do a POST request to the backend but any HTTP client can be used
    axios
      .post(
        BACKEND_URL_VALIDATE_SESSION,
        {
          appleUrl
        },
        {
          headers: { 'Access-Control-Allow-Origin': '*' }
        }
      )
      .then(function (response) {
        callback(response.data)
      })
  }

  /**
   * This is the main method of the script, since here we handle all the Apple Pay
   * events. Here you are able to populate your shipping methods, react to  shipping methods
   * changes, and many other interaction that the user has with the Apple Pay pup-up.
   *
   * @param {object} Apple Pay Session (the one generate on the button click)
   *
   */
  var _handleApplePayEvents = function (appleSession) {
    // This is the first event that Apple triggers. Here you need to validate the
    // Apple Pay Session from your Back-End
    appleSession.onvalidatemerchant = function (event) {
      _validateApplePaySession(event.validationURL, function (merchantSession) {
        console.log("merchantSeesion data is here: " + JSON.stringify(merchantSession))
        
        appleSession.completeMerchantValidation(merchantSession)
      })
    }

    // This method is triggered when a user select one of the shipping options.
    // Here you generally want to keep track of the transaction amount
    appleSession.onshippingmethodselected = function (event) {
      const shippingCost = event.shippingMethod.identifier === 'free' ? '0.00' : '5.00';
		  const totalCost = event.shippingMethod.identifier === 'free' ? '8.99' : '13.99';

		const lineItems = [
			{
				label: 'Shipping',
				amount: shippingCost,
			},
		];

		const total = {
			label: 'Apple Pay Demo',
			amount: totalCost,
		};

		session.completeShippingMethodSelection(ApplePaySession.STATUS_SUCCESS, total, lineItems);
    }

    // This method is the most important method. It gets triggered after the user has
    // confirmed the transaction with the Touch ID or Face ID. Besides getting all the
    // details about the customer you also get the Apple Pay payload needed to perform
    // a payment.
    appleSession.onpaymentauthorized = function (event) {
      // console.log("Print event payment data: " + JSON.stringify(event.payment))
      // _performTransaction(event.payment, function (outcome) {
      //   if (outcome.approved) {
      //     appleSession.completePayment(ApplePaySession.STATUS_SUCCESS)
      //     console.log(outcome)
      //   } else {
      //     appleSession.completePayment(ApplePaySession.STATUS_FAILURE)
      //     console.log(outcome)
      //   }
      // })
      console.log("Print event.payment data: " + JSON.stringify(event.payment))
    }

    // appleSession.oncancel = function (event) {
    //   console.log("Print full response: " + event)
    // }
  }

  // var _performTransaction = function (details, callback) {
  //   axios
  //     .post(
  //       BACKEND_URL_PAY,
  //       {
  //         details
  //       },
  //       {
  //         headers: { 'Access-Control-Allow-Origin': '*' }
  //       }
  //     )
  //     .then(function (response) {
  //       callback(response.data)
  //     })
  // }

  return {
    init: function () {
      if (_applePayAvailable()) {
        uiController.displayApplePayButton()
      } else {
        uiController.displayErrorMessage()
      }
      _setButtonClickListener()
    }
  }
})(applePayUiController)

applePayController.init()
